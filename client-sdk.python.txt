# MCP API 客戶端SDK (Python)
# 用於簡化API的調用

import requests
import json
from urllib.parse import urljoin
from typing import Dict, List, Optional, Union, Any

class McpApiClient:
    """MCP API 客戶端"""
    
    def __init__(self, base_url: str, api_key: str):
        """
        初始化MCP API客戶端
        
        Args:
            base_url (str): API伺服器基礎URL
            api_key (str): API金鑰
        """
        self.base_url = base_url[:-1] if base_url.endswith('/') else base_url
        self.api_key = api_key
        self.default_headers = {
            'Content-Type': 'application/json',
            'X-API-KEY': self.api_key
        }
    
    def _request(self, method: str, endpoint: str, data: Optional[Dict] = None, params: Optional[Dict] = None) -> Dict:
        """
        發送HTTP請求
        
        Args:
            method (str): HTTP方法
            endpoint (str): API端點
            data (Dict, optional): 請求資料
            params (Dict, optional): 查詢參數
            
        Returns:
            Dict: API響應
            
        Raises:
            Exception: 當API請求失敗時
        """
        url = urljoin(self.base_url, endpoint)
        
        try:
            if method.upper() == 'GET':
                response = requests.get(url, headers=self.default_headers, params=params)
            elif method.upper() == 'POST':
                response = requests.post(url, headers=self.default_headers, json=data, params=params)
            elif method.upper() == 'PUT':
                response = requests.put(url, headers=self.default_headers, json=data, params=params)
            elif method.upper() == 'DELETE':
                response = requests.delete(url, headers=self.default_headers, params=params)
            else:
                raise ValueError(f"不支持的HTTP方法: {method}")
            
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            if hasattr(e, 'response') and e.response is not None:
                try:
                    error_data = e.response.json()
                    error_message = error_data.get('message', str(e))
                except:
                    error_message = str(e)
            else:
                error_message = str(e)
            
            print(f"API請求錯誤 ({method} {endpoint}): {error_message}")
            raise Exception(error_message)
    
    def get_all_estates(self, params: Optional[Dict] = None) -> Dict:
        """
        獲取所有房地產資料
        
        Args:
            params (Dict, optional): 查詢參數
                type (str): 房產類型
                city (str): 城市
                minPrice (int): 最低價格
                maxPrice (int): 最高價格
                limit (int): 每頁數量
                page (int): 頁碼
                
        Returns:
            Dict: 房地產資料列表
        """
        return self._request('GET', '/estates', params=params)
    
    def get_estate_by_id(self, estate_id: str) -> Dict:
        """
        根據ID獲取房地產資料
        
        Args:
            estate_id (str): 房產ID
            
        Returns:
            Dict: 房地產資料
        """
        return self._request('GET', f'/estates/{estate_id}')
    
    def create_estate(self, estate_data: Dict) -> Dict:
        """
        創建新的房地產資料
        
        Args:
            estate_data (Dict): 房地產資料
            
        Returns:
            Dict: 創建的房地產資料
        """
        return self._request('POST', '/estates', data=estate_data)
    
    def update_estate(self, estate_id: str, estate_data: Dict) -> Dict:
        """
        更新房地產資料
        
        Args:
            estate_id (str): 房產ID
            estate_data (Dict): 更新的房地產資料
            
        Returns:
            Dict: 更新後的房地產資料
        """
        return self._request('PUT', f'/estates/{estate_id}', data=estate_data)
    
    def delete_estate(self, estate_id: str) -> Dict:
        """
        刪除房地產資料
        
        Args:
            estate_id (str): 房產ID
            
        Returns:
            Dict: 刪除結果
        """
        return self._request('DELETE', f'/estates/{estate_id}')
    
    def search_estates(self, search_params: Dict) -> Dict:
        """
        搜索房地產資料
        
        Args:
            search_params (Dict): 搜索參數
            
        Returns:
            Dict: 搜索結果
        """
        return self.get_all_estates(params=search_params)
    
    def validate_api_key(self) -> Dict:
        """
        驗證API金鑰
        
        Returns:
            Dict: 驗證結果
        """
        try:
            # 嘗試獲取一條資料，僅驗證API金鑰
            response = self._request('GET', '/estates', params={'limit': 1})
            return {
                'valid': True,
                'message': 'API金鑰有效',
                'permissions': response.get('permissions', ['read'])  # 伺服器如果返回權限資訊
            }
        except Exception as e:
            return {
                'valid': False,
                'message': str(e),
                'permissions': []
            }


# 使用範例:
"""
# 建立客戶端實例
client = McpApiClient('http://example.com/api', 'your_api_key_here')

# 獲取所有房地產資料
try:
    result = client.get_all_estates({'city': '台北', 'limit': 10, 'page': 1})
    print(result)
except Exception as e:
    print(f"錯誤: {e}")

# 根據ID獲取房地產資料
try:
    estate = client.get_estate_by_id('P123456')
    print(estate)
except Exception as e:
    print(f"錯誤: {e}")

# 創建新的房地產資料
new_estate = {
    'propertyId': 'P654321',
    'address': {
        'street': '信義路50號',
        'city': '台北',
        'state': '台北市',
        'zipCode': '11049',
        'country': '台灣'
    },
    'type': 'commercial',
    'price': 15000000,
    # ... 其他屬性
}

try:
    result = client.create_estate(new_estate)
    print(result)
except Exception as e:
    print(f"錯誤: {e}")
"""